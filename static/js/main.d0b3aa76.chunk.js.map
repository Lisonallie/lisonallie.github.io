{"version":3,"sources":["components/Input.jsx","components/EditData.jsx","components/CheckDelete.jsx","components/DeleteData.jsx","components/CreateInput.jsx","components/CreateNote.jsx","components/NoteData.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","useState","title","setTitle","newText","setNewText","Fragment","className","value","onChange","e","target","placeholder","onClick","axios","method","url","then","response","console","log","EditData","useModali","modal","toggleModal","icon","faPencilAlt","Modal","CheckDelete","deleteTitle","setDeleteTitle","window","confirm","faTrashAlt","DeleteData","faMinusCircle","CreateInput","author","setAuthor","text","setText","formMethod","data","URLSearchParams","append","CreateNote","faPlusSquare","NoteData","titles","setTitles","open","setOpen","useEffect","openNote","listNotes","map","note","key","id","onMouseOver","onMouseLeave","style","fontVariant","text_entry","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0b3aa76.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst Input = () => {\n  const [title, setTitle] = useState(\"\"); // '' is the initial state value\n  const [newText, setNewText] = useState(\"\");\n\n  \n  const handleSubmit = () => {\n        axios({\n          method: \"get\",\n          url: `http://localhost:4567/becode-database-api/update_note.php/?title=${title}&newtext=${newText}`\n        }).then(response => {\n            console.log(response);\n        });\n    }\n\n\n  return (\n    <React.Fragment>\n      <div className=\"inputHolder\">\n        <span className=\"editTitle\">Edit Note</span><br></br><br></br>\n        <input\n          className=\"inputTitle\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n          placeholder=\"Title of note you want to change\"\n        ></input>\n      </div>\n      <br></br>\n      <div className=\"inputHolder\">\n        <input\n          className=\"inputText\"\n          value={newText}\n          onChange={e => setNewText(e.target.value)}\n          placeholder=\"New text to be inserted\"\n        ></input><br></br>\n        <button onClick={handleSubmit} className=\"btn btn-secondary submit\">Submit</button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n//imrc\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modali, { useModali } from \"modali\";\nimport Input from \"./Input\";\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\n//rfce\nconst EditData = () => {\n  const [modal, toggleModal] = useModali();\n\n  return (\n    <React.Fragment>\n      <button className=\"btn btn-info edit\" onClick={toggleModal}>\n      <FontAwesomeIcon icon={faPencilAlt} /> Edit\n      </button>\n      <Modali.Modal {...modal}>\n        <div className=\"forPadding\">\n          <Input />\n        </div>\n      </Modali.Modal>\n    </React.Fragment>\n  );\n};\n\nexport default EditData;\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nconst CheckDelete = () => {\n  const [deleteTitle, setDeleteTitle] = useState(\"\");\n\n  const cancelDelete = () => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:4567/becode-database-api/delete_note.php/`\n    }).then(response => {\n      console.log(response);\n    });\n  };\n\n  const handleDelete = () => {\n    axios({\n      method: \"get\",\n      url: `http://localhost:4567/becode-database-api/delete_note.php/?title=${deleteTitle}`\n    }).then(response => {\n      console.log(response);\n    });\n  };\n\n  const warning = () => {\n    const confirmation = window.confirm(\"Are you sure you want to delete this note?\");\n    if (confirmation === true) {\n      handleDelete();\n    } else {\n      cancelDelete();\n    }\n  };\n  return (\n    <React.Fragment>\n      <div className=\"inputHolder\">\n        <span className=\"deleteTitle\">Delete Note</span>\n        <br></br>\n        <br></br>\n        <input\n          className=\"inputTitle\"\n          value={deleteTitle}\n          onChange={e => setDeleteTitle(e.target.value)}\n          placeholder=\"Title of note you want to delete\"\n        ></input>\n        <br></br>\n        <button onClick={warning} className=\"btn btn-warning submit\">\n          <FontAwesomeIcon icon={faTrashAlt} /> Delete\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CheckDelete;\n","import React from \"react\";\n//imrc\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modali, { useModali } from \"modali\";\nimport CheckDelete from \"./CheckDelete\";\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\n//rfce\nconst DeleteData = () => {\n  const [modal, toggleModal] = useModali();\n\n  return (\n    <React.Fragment>\n      <button className=\"btn btn-danger delete\" onClick={toggleModal}>\n        <FontAwesomeIcon icon={faMinusCircle} /> Delete\n      </button>\n      <Modali.Modal {...modal}>\n        <div className=\"forPadding\">\n          <CheckDelete />\n        </div>\n      </Modali.Modal>\n    </React.Fragment>\n  );\n};\n\nexport default DeleteData;","import { useState } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst CreateInput = () => {\n  const [title, setTitle] = useState(\"\"); // '' is the initial state value\n  const [author, setAuthor] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  const handleCreate = () => {\n    let data = new URLSearchParams();\n    data.append(\"text\", text);\n    axios({\n      method: \"POST\",\n      url: `http://localhost:4567/becode-database-api/create_note.php/?title=${title}&author=${author}`,\n      data: data\n    }).then(response => {\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"inputHolder\">\n        <span className=\"editTitle\">Create New Note</span>\n        <br></br>\n        <br></br>\n        <input\n          className=\"inputTitle\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n          placeholder=\"Title\"\n        ></input>\n      </div>\n      <br></br>\n      <div className=\"inputHolder\">\n        <input\n          className=\"inputText\"\n          value={author}\n          onChange={e => setAuthor(e.target.value)}\n          placeholder=\"Author\"\n        ></input>\n        <br></br>\n        <br></br>\n        <form method=\"POST\">\n          <div className=\"inputHolder\">\n            <input\n              formMethod=\"POST\"\n              className=\"inputText\"\n              value={text}\n              onChange={e => setText(e.target.value)}\n              placeholder=\"Content\"\n            ></input>\n            <br></br>\n          </div>\n        </form>\n        <button onClick={handleCreate} className=\"btn btn-success submit\">\n          Create\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CreateInput;\n","import React from \"react\";\n//imrc\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Modali, { useModali } from \"modali\";\nimport CreateInput from \"./CreateInput\";\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\n//rfce\nconst CreateNote = () => {\n  const [modal, toggleModal] = useModali();\n\n  return (\n    <React.Fragment>\n      <button className=\"btn btn-success edit\" onClick={toggleModal}>\n        <FontAwesomeIcon icon={faPlusSquare} /> Create Note\n      </button>\n      <Modali.Modal {...modal}>\n        <div className=\"forPadding\">\n          <CreateInput />\n        </div>\n      </Modali.Modal>\n    </React.Fragment>\n  );\n};\n\nexport default CreateNote;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport EditData from \"./EditData\";\nimport DeleteData from \"./DeleteData\";\nimport CreateNote from \"./CreateNote\";\n\nconst NoteData = () => {\n  const [titles, setTitles] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  // titles = SHOW titles & setTitles = GET titles/give value to first titles declaration\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"http://localhost:4567/becode-database-api/list_note.php\"\n    }).then(response => {\n      setTitles(response.data[0]);\n    });\n  });\n  //^^^^^add the array there to stop the response.data from repeating WAY TOO MANY TIMES\n\n  let openNote = () => {\n    setOpen(open => !open);\n  };\n\n  const listNotes = titles.map(note => (\n    <React.Fragment key={note.id}>\n      <li\n        onMouseOver={openNote}\n        onMouseLeave={openNote}\n        className=\"card-body overflow-auto noteTitles m-3\"\n        key={note.title}\n        style={{ fontVariant: open ? \"none\" : \"small-caps\" }}\n      >\n        {open ? note.text_entry : note.title}\n          <div id=\"noteAuthors\" key={note.author}>\n            {open ? null : note.author}\n          </div>\n      </li>\n    </React.Fragment>\n  ));\n\n  return (\n    <React.Fragment>\n      <div className=\"createEditDelete\">\n        <CreateNote />\n        <EditData />\n        <DeleteData />\n      </div>\n      <div className=\"card-deck\">\n        <div id=\"notesParent\" className=\"card titlesList\">\n          {listNotes}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NoteData;\n","import React from \"react\";\nimport 'font-awesome/css/font-awesome.min.css';\nimport \"./App.css\";\nimport NoteData from './components/NoteData';\n\nfunction App() {\n\n  return (\n    <div>\n      <NoteData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}